{"ast":null,"code":"var _jsxFileName = \"/home/shallon/development/phase-5/movers-app/client/src/components/Inventory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Inventory.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inventory = () => {\n  _s();\n  const [residenceTypes, setResidenceTypes] = useState([]);\n  const [selectedResidenceTypes, setSelectedResidenceTypes] = useState([]);\n  const residenceImages = {\n    1: './bedsitter.jpg',\n    2: './one-bedroom.jpg',\n    3: './two-bedroom.jpg',\n    4: './studio.jpg'\n  };\n  useEffect(() => {\n    const fetchResidenceTypes = async () => {\n      try {\n        const response = await fetch('/residences'); // Assuming this is the endpoint to fetch residence types\n        const data = await response.json();\n        if (response.status === 200) {\n          setResidenceTypes(data.residences);\n          console.log('Fetched residence types:', data.residences); // Add this line\n        } else {\n          console.error('Failed to fetch residence types.');\n        }\n      } catch (error) {\n        console.error('Error while fetching residence types:', error);\n      }\n    };\n    fetchResidenceTypes();\n  }, []);\n  const handleResidenceTypeChange = residenceTypeId => {\n    setSelectedResidenceTypes(prevSelectedResidenceTypes => {\n      if (prevSelectedResidenceTypes.includes(residenceTypeId)) {\n        // Deselect the residence type if already selected\n        return prevSelectedResidenceTypes.filter(id => id !== residenceTypeId);\n      } else {\n        // Select the residence type if not selected\n        return [...prevSelectedResidenceTypes, residenceTypeId];\n      }\n    });\n  };\n  const handleSave = async () => {\n    try {\n      const response = await fetch('/inventory', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          residence_types: selectedResidenceTypes\n        })\n      });\n      if (response.status === 201) {\n        console.log('Inventory saved successfully.');\n        // Reset form or navigate to another page\n      } else {\n        console.error('Failed to save inventory.');\n      }\n    } catch (error) {\n      console.error('Error while saving inventory:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Inventory Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"residence-box\",\n      children: residenceTypes.map(residence => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"residence-item\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `checkbox-${residence.id}`,\n          checked: selectedResidenceTypes.includes(residence.id),\n          onChange: () => handleResidenceTypeChange(residence.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, residence.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSave,\n      className: \"button-container\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Inventory, \"nPpEAV4eZdDRbsWy+MPFkdTnfXA=\");\n_c = Inventory;\nexport default Inventory;\nvar _c;\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Inventory","_s","residenceTypes","setResidenceTypes","selectedResidenceTypes","setSelectedResidenceTypes","residenceImages","fetchResidenceTypes","response","fetch","data","json","status","residences","console","log","error","handleResidenceTypeChange","residenceTypeId","prevSelectedResidenceTypes","includes","filter","id","handleSave","method","headers","body","JSON","stringify","residence_types","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","residence","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/shallon/development/phase-5/movers-app/client/src/components/Inventory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Inventory.css';\n\nconst Inventory = () => {\n  const [residenceTypes, setResidenceTypes] = useState([]);\n  const [selectedResidenceTypes, setSelectedResidenceTypes] = useState([]);\n\n  const residenceImages = {\n    1: './bedsitter.jpg',\n    2: './one-bedroom.jpg',\n    3: './two-bedroom.jpg',\n    4: './studio.jpg',\n  };\n\n  useEffect(() => {\n    const fetchResidenceTypes = async () => {\n      try {\n        const response = await fetch('/residences'); // Assuming this is the endpoint to fetch residence types\n        const data = await response.json();\n\n        if (response.status === 200) {\n          setResidenceTypes(data.residences);\n          console.log('Fetched residence types:', data.residences); // Add this line\n        } else {\n          console.error('Failed to fetch residence types.');\n        }\n      } catch (error) {\n        console.error('Error while fetching residence types:', error);\n      }\n    };\n\n    fetchResidenceTypes();\n  }, []);\n\n  const handleResidenceTypeChange = (residenceTypeId) => {\n    setSelectedResidenceTypes((prevSelectedResidenceTypes) => {\n      if (prevSelectedResidenceTypes.includes(residenceTypeId)) {\n        // Deselect the residence type if already selected\n        return prevSelectedResidenceTypes.filter((id) => id !== residenceTypeId);\n      } else {\n        // Select the residence type if not selected\n        return [...prevSelectedResidenceTypes, residenceTypeId];\n      }\n    });\n  };\n\n  const handleSave = async () => {\n    try {\n      const response = await fetch('/inventory', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          residence_types: selectedResidenceTypes,\n        }),\n      });\n\n      if (response.status === 201) {\n        console.log('Inventory saved successfully.');\n        // Reset form or navigate to another page\n      } else {\n        console.error('Failed to save inventory.');\n      }\n    } catch (error) {\n      console.error('Error while saving inventory:', error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Inventory Form</h2>\n      <div className=\"residence-box\">\n        {residenceTypes.map((residence) => (\n          <div key={residence.id} className=\"residence-item\">\n            <input\n              type=\"checkbox\"\n              id={`checkbox-${residence.id}`}\n              checked={selectedResidenceTypes.includes(residence.id)}\n              onChange={() => handleResidenceTypeChange(residence.id)}\n            />\n            {/*<label htmlFor={`checkbox-${residence.id}`}>{residence.name}</label>\n            {residenceImages[residence.id] && (\n              <img\n                src={residenceImages[residence.id]}\n                alt={` ${residence.name}`}\n                className=\"residence-image\"\n              />\n            )}*/}\n          </div>\n        ))}\n      </div>\n\n      <button type=\"button\" onClick={handleSave} className=\"button-container\">\n        Save\n      </button>\n    </div>\n  );\n};\n\nexport default Inventory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}