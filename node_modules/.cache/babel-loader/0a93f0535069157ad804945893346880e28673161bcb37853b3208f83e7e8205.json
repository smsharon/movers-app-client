{"ast":null,"code":"var _jsxFileName = \"/home/shallon/development/phase-5/movers-app/client/src/components/Inventory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport './Inventory.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inventory = () => {\n  _s();\n  const [residenceTypes, setResidenceTypes] = useState([]);\n  const [selectedResidenceTypes, setSelectedResidenceTypes] = useState([]);\n  useEffect(() => {\n    const fetchResidenceTypes = async () => {\n      try {\n        const response = await fetch('/residences'); // Assuming this is the endpoint to fetch residence types\n        const data = await response.json();\n        if (response.status === 200) {\n          setResidenceTypes(data.residences);\n          console.log('Fetched residence types:', data.residences); // Add this line\n        } else {\n          console.error('Failed to fetch residence types.');\n        }\n      } catch (error) {\n        console.error('Error while fetching residence types:', error);\n      }\n    };\n    fetchResidenceTypes();\n  }, []);\n  const handleResidenceTypeChange = residenceTypeId => {\n    setSelectedResidenceTypes(prevSelectedResidenceTypes => {\n      // Use a single value instead of an array\n      const newSelectedResidenceType = prevSelectedResidenceTypes[0] === residenceTypeId ? null : residenceTypeId;\n      return newSelectedResidenceType !== null ? [newSelectedResidenceType] : [];\n    });\n  };\n\n  // Function to include the access token in requests\n  const includeAccessToken = () => {\n    const token = localStorage.getItem('access_token');\n    return token ? `Bearer ${token}` : '';\n  };\n  const handleSave = async () => {\n    try {\n      const response = await fetch('/inventory', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': includeAccessToken()\n        },\n        body: JSON.stringify({\n          residence_type_id: selectedResidenceTypes[0]\n        })\n      });\n      if (response.status === 201) {\n        console.log('Inventory saved successfully.');\n        // Reset form or navigate to another page\n      } else {\n        console.error('Failed to save inventory.');\n      }\n    } catch (error) {\n      console.error('Error while saving inventory:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Inventory Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"residenceTypes\",\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Residence Types:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), residenceTypes.map(residence => /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: residence.name /* Make sure the property name is correct */,\n          checked: selectedResidenceTypes.includes(residence.id),\n          onChange: () => handleResidenceTypeChange(residence.id),\n          className: \"form-check\"\n        }, residence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"button\",\n        onClick: handleSave,\n        className: \"button-container\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Inventory, \"nPpEAV4eZdDRbsWy+MPFkdTnfXA=\");\n_c = Inventory;\nexport default Inventory;\nvar _c;\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"names":["React","useState","useEffect","Container","Form","Button","useNavigate","jsxDEV","_jsxDEV","Inventory","_s","residenceTypes","setResidenceTypes","selectedResidenceTypes","setSelectedResidenceTypes","fetchResidenceTypes","response","fetch","data","json","status","residences","console","log","error","handleResidenceTypeChange","residenceTypeId","prevSelectedResidenceTypes","newSelectedResidenceType","includeAccessToken","token","localStorage","getItem","handleSave","method","headers","body","JSON","stringify","residence_type_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","controlId","Label","map","residence","Check","type","label","name","checked","includes","id","onChange","variant","onClick","_c","$RefreshReg$"],"sources":["/home/shallon/development/phase-5/movers-app/client/src/components/Inventory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport './Inventory.css';\nimport { useNavigate } from 'react-router-dom';\n\nconst Inventory = () => {\n  const [residenceTypes, setResidenceTypes] = useState([]);\n  const [selectedResidenceTypes, setSelectedResidenceTypes] = useState([]);\n\n  useEffect(() => {\n    const fetchResidenceTypes = async () => {\n      try {\n        const response = await fetch('/residences');  // Assuming this is the endpoint to fetch residence types\n        const data = await response.json();\n\n        if (response.status === 200) {\n          setResidenceTypes(data.residences);\n          console.log('Fetched residence types:', data.residences); // Add this line\n        } else {\n          console.error('Failed to fetch residence types.');\n        }\n      } catch (error) {\n        console.error('Error while fetching residence types:', error);\n      }\n    };\n\n    fetchResidenceTypes();\n  }, []);\n\n  const handleResidenceTypeChange = (residenceTypeId) => {\n    setSelectedResidenceTypes((prevSelectedResidenceTypes) => {\n      // Use a single value instead of an array\n      const newSelectedResidenceType = prevSelectedResidenceTypes[0] === residenceTypeId ? null : residenceTypeId;\n  \n      return newSelectedResidenceType !== null ? [newSelectedResidenceType] : [];\n    });\n  };\n  \n\n  // Function to include the access token in requests\n  const includeAccessToken = () => {\n    const token = localStorage.getItem('access_token');\n    return token ? `Bearer ${token}` : '';\n  };\n  \n\n  const handleSave = async () => {\n    try {\n      const response = await fetch('/inventory', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': includeAccessToken(),\n        },\n        body: JSON.stringify({\n          residence_type_id: selectedResidenceTypes[0],\n        }),\n      });\n\n      if (response.status === 201) {\n        console.log('Inventory saved successfully.');\n        // Reset form or navigate to another page\n      } else {\n        console.error('Failed to save inventory.');\n      }\n    } catch (error) {\n      console.error('Error while saving inventory:', error);\n    }\n  };\n\n  return (\n    <Container className=\"container\">\n      <h2>Inventory Form</h2>\n      <Form>\n        <Form.Group controlId=\"residenceTypes\" className=\"form-group\">\n          <Form.Label>Residence Types:</Form.Label>\n          {residenceTypes.map((residence) => (\n            <Form.Check\n              key={residence.id}\n              type=\"checkbox\"\n              label={residence.name} /* Make sure the property name is correct */\n              checked={selectedResidenceTypes.includes(residence.id)}\n              onChange={() => handleResidenceTypeChange(residence.id)}\n              className=\"form-check\"\n            />\n          ))}\n        </Form.Group>\n  \n        <Button variant=\"primary\" type=\"button\" onClick={handleSave} className=\"button-container\">\n          Save\n        </Button>\n      </Form>\n    </Container>\n  );\n  \n};\n\nexport default Inventory;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}