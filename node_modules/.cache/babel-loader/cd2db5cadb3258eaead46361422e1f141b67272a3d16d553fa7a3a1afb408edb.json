{"ast":null,"code":"var _jsxFileName = \"/home/shallon/development/phase-5/movers-app/client/src/components/MovingPriceCalculator.js\",\n  _s = $RefreshSig$();\n// MovingPriceCalculator.js\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovingPriceCalculator = ({\n  selectedInventory,\n  locationDetails\n}) => {\n  _s();\n  const [calculatedQuote, setCalculatedQuote] = useState(null);\n  useEffect(() => {\n    calculateQuote();\n  }, [selectedInventory, locationDetails]);\n  const calculateQuote = () => {\n    // Dummy pricing factors (replace with your actual pricing logic)\n    const basePrice = 100; // Base price for the move\n    const pricePerItem = 10; // Price per item\n    const distanceFactor = 2; // Price factor based on distance\n\n    // Assuming residenceType is passed as a property\n    const residenceTypeFactor = getResidenceTypeFactor(locationDetails.residenceType);\n    const totalItems = selectedInventory.length;\n    const distance = locationDetails.distance;\n\n    // Calculate the quote based on residence type, items, and distance\n    const calculatedQuote = basePrice + totalItems * pricePerItem + distance * distanceFactor + residenceTypeFactor;\n    setCalculatedQuote(calculatedQuote);\n  };\n\n  // Function to get pricing factor based on residence type\n  const getResidenceTypeFactor = residenceType => {\n    // Dummy logic (replace with your actual pricing logic)\n    switch (residenceType) {\n      case 'Bedsitter':\n        return 5000;\n      case 'One Bedroom':\n        return 10000;\n      case 'Studio':\n        return 75;\n      case 'Two Bedroom':\n        return 150;\n      default:\n        return 0;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Calculated Quote:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), calculatedQuote !== null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The estimated moving cost is $\", calculatedQuote]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Calculating quote...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(MovingPriceCalculator, \"lcAhl3Iofk0umd9s5rUhR2j4rZc=\");\n_c = MovingPriceCalculator;\nexport default MovingPriceCalculator;\nvar _c;\n$RefreshReg$(_c, \"MovingPriceCalculator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MovingPriceCalculator","selectedInventory","locationDetails","_s","calculatedQuote","setCalculatedQuote","calculateQuote","basePrice","pricePerItem","distanceFactor","residenceTypeFactor","getResidenceTypeFactor","residenceType","totalItems","length","distance","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/shallon/development/phase-5/movers-app/client/src/components/MovingPriceCalculator.js"],"sourcesContent":["// MovingPriceCalculator.js\n\nimport React, { useState, useEffect } from 'react';\n\nconst MovingPriceCalculator = ({ selectedInventory, locationDetails }) => {\n  const [calculatedQuote, setCalculatedQuote] = useState(null);\n\n  useEffect(() => {\n    calculateQuote();\n  }, [selectedInventory, locationDetails]);\n\n  const calculateQuote = () => {\n    // Dummy pricing factors (replace with your actual pricing logic)\n    const basePrice = 100; // Base price for the move\n    const pricePerItem = 10; // Price per item\n    const distanceFactor = 2; // Price factor based on distance\n\n    // Assuming residenceType is passed as a property\n    const residenceTypeFactor = getResidenceTypeFactor(locationDetails.residenceType);\n\n    const totalItems = selectedInventory.length;\n    const distance = locationDetails.distance;\n\n    // Calculate the quote based on residence type, items, and distance\n    const calculatedQuote = basePrice + totalItems * pricePerItem + distance * distanceFactor + residenceTypeFactor;\n\n    setCalculatedQuote(calculatedQuote);\n  };\n\n  // Function to get pricing factor based on residence type\n  const getResidenceTypeFactor = (residenceType) => {\n    // Dummy logic (replace with your actual pricing logic)\n    switch (residenceType) {\n      case 'Bedsitter':\n        return 5000;\n      case 'One Bedroom':\n        return 10000;\n      case 'Studio':\n        return 75;\n      case 'Two Bedroom':\n        return 150;\n      default:\n        return 0;\n    }\n  };\n\n  return (\n    <div>\n      <h3>Calculated Quote:</h3>\n      {calculatedQuote !== null ? (\n        <p>The estimated moving cost is ${calculatedQuote}</p>\n      ) : (\n        <p>Calculating quote...</p>\n      )}\n    </div>\n  );\n};\n\nexport default MovingPriceCalculator;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,iBAAiB;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACxE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACdS,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACL,iBAAiB,EAAEC,eAAe,CAAC,CAAC;EAExC,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA,MAAMC,SAAS,GAAG,GAAG,CAAC,CAAC;IACvB,MAAMC,YAAY,GAAG,EAAE,CAAC,CAAC;IACzB,MAAMC,cAAc,GAAG,CAAC,CAAC,CAAC;;IAE1B;IACA,MAAMC,mBAAmB,GAAGC,sBAAsB,CAACT,eAAe,CAACU,aAAa,CAAC;IAEjF,MAAMC,UAAU,GAAGZ,iBAAiB,CAACa,MAAM;IAC3C,MAAMC,QAAQ,GAAGb,eAAe,CAACa,QAAQ;;IAEzC;IACA,MAAMX,eAAe,GAAGG,SAAS,GAAGM,UAAU,GAAGL,YAAY,GAAGO,QAAQ,GAAGN,cAAc,GAAGC,mBAAmB;IAE/GL,kBAAkB,CAACD,eAAe,CAAC;EACrC,CAAC;;EAED;EACA,MAAMO,sBAAsB,GAAIC,aAAa,IAAK;IAChD;IACA,QAAQA,aAAa;MACnB,KAAK,WAAW;QACd,OAAO,IAAI;MACb,KAAK,aAAa;QAChB,OAAO,KAAK;MACd,KAAK,QAAQ;QACX,OAAO,EAAE;MACX,KAAK,aAAa;QAChB,OAAO,GAAG;MACZ;QACE,OAAO,CAAC;IACZ;EACF,CAAC;EAED,oBACEb,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzBhB,eAAe,KAAK,IAAI,gBACvBL,OAAA;MAAAiB,QAAA,GAAG,gCAA8B,EAACZ,eAAe;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEtDrB,OAAA;MAAAiB,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC3B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CApDIH,qBAAqB;AAAAqB,EAAA,GAArBrB,qBAAqB;AAsD3B,eAAeA,qBAAqB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}